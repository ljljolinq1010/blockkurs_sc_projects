head(immune@meta.data$)
head(immune@meta.data)
setwd("~/Downloads/blockkurs_sc_projects/data/project1_data")
getwd()
setwd("../project1_data/")
wt <- CreateSeuratObject(counts = wt_sparse, project = "wt", min.cells = 3, min.features = 200)
wt_data <- readRDS("GSM3187948_Znf_Wt_Counts_sparse.rds")
mut_data <- readRDS("GSM3187949_Znf_Mut_Counts_sparse.rds")
wt <- CreateSeuratObject(counts = wt_sparse, project = "wt", min.cells = 3, min.features = 200)
wt <- CreateSeuratObject(counts = wt_data, project = "wt", min.cells = 3, min.features = 200)
mut <- CreateSeuratObject(counts = mut_data, project = "wt", min.cells = 3, min.features = 200)
wt <- NormalizeData(wt, normalization.method = "LogNormalize", scale.factor = 10000)
mut <- NormalizeData(mut, normalization.method = "LogNormalize", scale.factor = 10000)
head(wt@meta.data)
wt@meta.data$genotype <- "wild_type"
mut@meta.data$genotype <- "znf536_ko"
forebrain <- merge(wt, mut)
forebrain
head(forebrain@meta.data)
forebrain <- NormalizeData(forebrain, normalization.method = "LogNormalize", scale.factor = 10000)
forebrain <- FindVariableFeatures(forebrain, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(forebrain), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(forebrain)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot1 + plot2
all.genes <- rownames(forebrain)
forebrain <- ScaleData(forebrain, features = all.genes)
forebrain <- RunPCA(forebrain, features = VariableFeatures(object = wt))
forebrain <- RunPCA(forebrain, features = VariableFeatures(object = forebrain))
ElbowPlot(forebrain)
forebrain <- FindNeighbors(forebrain, dims = 1:15)
forebrain <- RunUMAP(forebrain, dims = 1:10)
DimPlot(forebrain, reduction = "umap")
DimPlot(forebrain, reduction = "umap", group.by = "genotype")
forebrain <- FindClusters(forebrain, resolutio = 0.5)
DimPlot(forebrain, reduction = "umap", group.by = "ident")
table(forebrain@meta.data$genotype, forebrain@meta.data$RNA_snn_res.0.5)
DimPlot(forebrain, reduction = "umap", group.by = "ident", label = T)
forebrain <- FindClusters(forebrain, resolutio = 1)
DimPlot(forebrain, reduction = "umap", group.by = "ident", label = T)
table(forebrain@meta.data$genotype, forebrain@meta.data$RNA_snn_res.1.0)
table(forebrain@meta.data$genotype, forebrain@meta.data$RNA_snn_res.1)
immune <- NormalizeData(immune, normalization.method = "LogNormalize", scale.factor = 10000)
immune <- FindVariableFeatures(immune, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(immune), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(immune)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot1 + plot2
all.genes <- rownames(immune)
immune <- ScaleData(immune, features = all.genes)
immune <- RunPCA(immune, features = VariableFeatures(object = immune))
ElbowPlot(immune)
immune <- FindNeighbors(immune, dims = 1:15)
immune <- FindClusters(immune, resolutio = 0.5)
immune <- FindClusters(immune, resolutio = 1)
immune <- RunUMAP(immune, dims = 1:10)
DimPlot(immune, reduction = "umap", group.by = "genotype")
DimPlot(immune, reduction = "umap", group.by = "morph")
DimPlot(immune, reduction = "umap", group.by = "ident", label = T)
DimPlot(immune, reduction = "umap", group.by = "morph")
DimPlot(immune, reduction = "umap", group.by = "RNA_snn_res.0.5", label = T)
immune <- FindClusters(immune, resolutio = 0.25)
DimPlot(immune, reduction = "umap", group.by = "RNA_snn_res.0.25", label = T)
DimPlot(immune, reduction = "umap", group.by = "morph")
DimPlot(immune, reduction = "umap", group.by = "RNA_snn_res.0.25", label = T)
table(immune@meta.data$genotype, immune@meta.data$RNA_snn_res.0.25)
table(immune@meta.data$morph, immune@meta.data$RNA_snn_res.0.25)
table(immune@meta.data$morph, immune@meta.data$RNA_snn_res.0.5)
table(immune@meta.data$morph, immune@meta.data$RNA_snn_res.1)
DotPlot(immune, group.by = "RNA_snn_res.0.25", features = c("cd74a", "apoc1", "adam8a", "cxcr4b"))
DotPlot(immune, group.by = "RNA_snn_res.0.25", features = c("cd74a", "apoc1", "adam8a", "cxcr4b", "apoeb"))
idents
# Subset Seurat object to just immune cells, and just Pachon and Surface, and downsample surface
immune <- subset(hypo, idents = c("Erythrocytes","Tcells","Bcells","Mast_cells","Neutrophils","Macrophages","Microglia"))
Idents(immune) <- "morph"
unique(immune@meta.data$morph)
immune.sub <- subset(immune, idents = c("Choy_surface", "Pachon_cave"))
# There were ~2.17232x more cells from Choy_surface than Pachon_cave, so downsample immune cells by same factor
immune.pachon <- subset(immune, idents = c("Pachon_cave"))
immune.choy <- subset(immune, idents = c("Choy_surface"))
immune.choy.ds <- immune.choy[, sample(colnames(immune.choy), size = round(7144/2.17232), replace=F)]
# Extra raw data, and meta data separately for each
immune.pachon.data <- GetAssayData(immune.pachon, slot = "counts")
immune.choy.data <- GetAssayData(immune.choy.ds, slot = "counts")
setwd("/Volumes/BZ/RG Schier/Group/Blockkurs single cell/blockkurs_sc_projects/data/project3_data/")
saveRDS(immune.pachon.data, file = "immune_cells_Pachon.rds")
saveRDS(immune.choy.data, file = "immune_cells_ChoySurface.rds")
### Load and recreate Seurat Objects and combined object
# FIRTST SET YOUR WORKING DIRECTORY TO WHERE YOU DOWNLOADED THE DATA
setwd("~/Downloads/blockkurs_sc_projects/data/project3_data")
# Read in the count matrices
pachon.data <- readRDS("immune_cells_Pachon.rds")
surface.data <- readRDS("immune_cells_ChoySurface.rds")
# Generate Seurat objects for each, then merge them together (if you want)
pachon <- CreateSeuratObject(counts = pachon.data, project = "Pachon_cave", min.cells = 3, min.features = 200)
pachon@meta.data$morph <- "Pachon_cave"
surface <- CreateSeuratObject(counts = surface.data, project = "Surface", min.cells = 3, min.features = 200)
surface@meta.data$morph <- "Surface"
# This step is optional, you can keep them separate or together
immune <- merge(pachon, surface)
immune <- NormalizeData(immune, normalization.method = "LogNormalize", scale.factor = 10000)
immune <- FindVariableFeatures(immune, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(immune), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(immune)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot1 + plot2
all.genes <- rownames(immune)
immune <- ScaleData(immune, features = all.genes)
immune <- RunPCA(immune, features = VariableFeatures(object = immune))
ElbowPlot(immune)
immune <- FindNeighbors(immune, dims = 1:15)
immune <- FindClusters(immune, resolutio = 0.25)
immune <- FindClusters(immune, resolutio = 0.5)
immune <- FindClusters(immune, resolutio = 1)
immune <- RunUMAP(immune, dims = 1:10)
DimPlot(immune, reduction = "umap", group.by = "morph")
DimPlot(immune, reduction = "umap", group.by = "RNA_snn_res.0.25", label = T)
DimPlot(immune, reduction = "umap", group.by = "RNA_snn_res.0.5", label = T)
DimPlot(immune, reduction = "umap", group.by = "RNA_snn_res.1", label = T)
DotPlot(immune, group.by = "RNA_snn_res.0.25", features = c("cd74a", "apoc1", "adam8a", "cxcr4b", "apoeb"))
getwd()
table(forebrain@meta.data$genotype, forebrain@meta.data$RNA_snn_res.0.5)
table(forebrain@meta.data$genotype, forebrain@meta.data$RNA_snn_res.1)
forebrain <- FindClusters(forebrain, resolutio = 0.25)
table(forebrain@meta.data$genotype, forebrain@meta.data$RNA_snn_res.0.25)
DimPlot(forebrain, reduction = "umap", group.by = "RNA_snn_res.0.25", label = T)
forebrain <- merge(wt, mut)
forebrain <- NormalizeData(forebrain, normalization.method = "LogNormalize", scale.factor = 10000)
forebrain <- FindVariableFeatures(forebrain, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(forebrain), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(forebrain)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot1 + plot2
all.genes <- rownames(forebrain)
forebrain <- ScaleData(forebrain, features = all.genes)
forebrain <- RunPCA(forebrain, features = VariableFeatures(object = forebrain))
ElbowPlot(forebrain)
forebrain <- FindNeighbors(forebrain, dims = 1:10)
forebrain <- FindClusters(forebrain, resolutio = 0.25)
forebrain <- FindClusters(forebrain, resolutio = 0.5)
forebrain <- FindClusters(forebrain, resolutio = 1)
forebrain <- RunUMAP(forebrain, dims = 1:10)
DimPlot(forebrain, reduction = "umap", group.by = "genotype")
DimPlot(forebrain, reduction = "umap", group.by = "genotype")
DimPlot(forebrain, reduction = "umap", group.by = "RNA_snn_res.0.25", label = T)
DimPlot(forebrain, reduction = "umap", group.by = "RNA_snn_res.0.5", label = T)
DimPlot(forebrain, reduction = "umap", group.by = "RNA_snn_res.1", label = T)
table(forebrain@meta.data$genotype, forebrain@meta.data$RNA_snn_res.0.25)
table(forebrain@meta.data$genotype, forebrain@meta.data$RNA_snn_res.0.5)
table(forebrain@meta.data$genotype, forebrain@meta.data$RNA_snn_res.1)
forebrain <- FindNeighbors(forebrain, dims = 1:20)
forebrain <- FindClusters(forebrain, resolutio = 0.25)
forebrain <- FindClusters(forebrain, resolutio = 0.5)
forebrain <- FindClusters(forebrain, resolutio = 1)
forebrain <- RunUMAP(forebrain, dims = 1:20)
DimPlot(forebrain, reduction = "umap", group.by = "genotype")
DimPlot(forebrain, reduction = "umap", group.by = "RNA_snn_res.0.25", label = T)
DimPlot(forebrain, reduction = "umap", group.by = "RNA_snn_res.0.5", label = T)
DimPlot(forebrain, reduction = "umap", group.by = "RNA_snn_res.1", label = T)
table(forebrain@meta.data$genotype, forebrain@meta.data$RNA_snn_res.0.25)
table(forebrain@meta.data$genotype, forebrain@meta.data$RNA_snn_res.0.5)
table(forebrain@meta.data$genotype, forebrain@meta.data$RNA_snn_res.1)
plot1 + plot2
plot2
forebrain <- RunPCA(forebrain, features = VariableFeatures(object = forebrain)[1:1000])
ElbowPlot(forebrain)
forebrain <- FindNeighbors(forebrain, dims = 1:20)
forebrain <- FindClusters(forebrain, resolutio = 0.25)
forebrain <- FindClusters(forebrain, resolutio = 0.5)
forebrain <- FindClusters(forebrain, resolutio = 1)
forebrain <- RunUMAP(forebrain, dims = 1:20)
DimPlot(forebrain, reduction = "umap", group.by = "genotype")
DimPlot(forebrain, reduction = "umap", group.by = "RNA_snn_res.0.25", label = T)
DimPlot(forebrain, reduction = "umap", group.by = "RNA_snn_res.0.5", label = T)
DimPlot(forebrain, reduction = "umap", group.by = "RNA_snn_res.1", label = T)
table(forebrain@meta.data$genotype, forebrain@meta.data$RNA_snn_res.0.25)
table(forebrain@meta.data$genotype, forebrain@meta.data$RNA_snn_res.0.5)
table(forebrain@meta.data$genotype, forebrain@meta.data$RNA_snn_res.1)
forebrain <- FindNeighbors(forebrain, dims = 1:10)
forebrain <- FindClusters(forebrain, resolutio = 0.25)
forebrain <- FindClusters(forebrain, resolutio = 0.5)
forebrain <- FindClusters(forebrain, resolutio = 1)
forebrain <- RunUMAP(forebrain, dims = 1:10)
DimPlot(forebrain, reduction = "umap", group.by = "genotype")
DimPlot(forebrain, reduction = "umap", group.by = "RNA_snn_res.0.25", label = T)
DimPlot(forebrain, reduction = "umap", group.by = "RNA_snn_res.0.5", label = T)
DimPlot(forebrain, reduction = "umap", group.by = "RNA_snn_res.1", label = T)
table(forebrain@meta.data$genotype, forebrain@meta.data$RNA_snn_res.0.25)
table(forebrain@meta.data$genotype, forebrain@meta.data$RNA_snn_res.0.5)
table(forebrain@meta.data$genotype, forebrain@meta.data$RNA_snn_res.1)
?VariableFeatures
### Run for wt separately
wt <- NormalizeData(wt, normalization.method = "LogNormalize", scale.factor = 10000)
wt <- FindVariableFeatures(wt, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(wt), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(wt)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot1 + plot2
all.genes <- rownames(wt)
wt <- ScaleData(wt, features = all.genes)
wt <- RunPCA(wt, features = VariableFeatures(object = wt))
ElbowPlot(wt)
wt <- FindNeighbors(wt, dims = 1:10)
wt <- FindClusters(wt, resolutio = 0.25)
wt <- FindClusters(wt, resolutio = 0.5)
wt <- FindClusters(wt, resolutio = 1)
wt <- RunUMAP(wt, dims = 1:10)
DimPlot(wt, reduction = "umap", group.by = "genotype")
DimPlot(wt, reduction = "umap", group.by = "RNA_snn_res.0.25", label = T)
DimPlot(wt, reduction = "umap", group.by = "RNA_snn_res.0.5", label = T)
DimPlot(wt, reduction = "umap", group.by = "RNA_snn_res.1", label = T)
table(wt@meta.data$genotype, wt@meta.data$RNA_snn_res.0.25)
table(wt@meta.data$genotype, wt@meta.data$RNA_snn_res.0.5)
table(wt@meta.data$genotype, wt@meta.data$RNA_snn_res.1)
### Run for mut separately
mut <- NormalizeData(mut, normalization.method = "LogNormalize", scale.factor = 10000)
mut <- FindVariableFeatures(mut, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(mut), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(mut)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot1 + plot2
all.genes <- rownames(mut)
mut <- ScaleData(mut, features = all.genes)
mut <- RunPCA(mut, features = VariableFeatures(object = mut))
ElbowPlot(mut)
mut <- FindNeighbors(mut, dims = 1:10)
mut <- FindClusters(mut, resolutio = 0.25)
mut <- FindClusters(mut, resolutio = 0.5)
mut <- FindClusters(mut, resolutio = 1)
mut <- RunUMAP(mut, dims = 1:10)
DimPlot(mut, reduction = "umap", group.by = "genotype")
DimPlot(mut, reduction = "umap", group.by = "RNA_snn_res.0.25", label = T)
DimPlot(mut, reduction = "umap", group.by = "RNA_snn_res.0.5", label = T)
DimPlot(mut, reduction = "umap", group.by = "RNA_snn_res.1", label = T)
table(mut@meta.data$genotype, mut@meta.data$RNA_snn_res.0.25)
table(mut@meta.data$genotype, mut@meta.data$RNA_snn_res.0.5)
table(mut@meta.data$genotype, mut@meta.data$RNA_snn_res.1)
DimPlot(mut, reduction = "umap", group.by = "RNA_snn_res.0.25", label = T)
DimPlot(wt, reduction = "umap", group.by = "RNA_snn_res.0.25", label = T)
mut_markers <- FindMarkers(mut, group.by = "RNA_snn_res.0.25")
mut_markers <- FindAllMarkers(mut, group.by = "RNA_snn_res.0.25")
### Fin marker genes
Idents(mut) <- "RNA_snn_res.0.25"
mut_markers <- FindAllMarkers(mut, group.by = "RNA_snn_res.0.25")
Idents(wt) <- "RNA_snn_res.0.25"
wt_markers <- FindAllMarkers(wt, group.by = "RNA_snn_res.0.25")
length(mut_markers)
dim(mut_markers)
head(mut_markers)
library(dplyr)
mut_markers %>% group_by(cluster)
mut_markers %>% group_by(cluster) %>% head()
View(mut_markers)
mut_markers %>% group_by(cluster) %>% top_n(5, avg_log2FC)
test <- mut_markers %>% group_by(cluster) %>% top_n(5, avg_log2FC)
dim(test)
View(test)
mut_markers_5 <- mut_markers %>% group_by(cluster) %>% top_n(5, avg_log2FC)
wt_markers_5 <- wt_markers %>% group_by(cluster) %>% top_n(5, avg_log2FC)
View(mut_markers_5)
View(wt_markers_5)
DotPlot(wt, features = wt_markers_5)
DotPlot(wt, features = wt_markers_5$gene)
DotPlot(wt, features = unique(wt_markers_5$gene))
DotPlot(wt, features = unique(wt_markers_5$gene)) + RotatedAxis()
wt.markers.plot <-DotPlot(wt, features = unique(wt_markers_5$gene)) + RotatedAxis()
mut.markers.plot <- DotPlot(mut, features = unique(mut_markers_5$gene)) + RotatedAxis()
wt.markers.plot + mut.markers.plot
wt.markers.plot <-DotPlot(wt, features = unique(wt_markers_5$gene)) + RotatedAxis() + ggtitle("wt with wt markers")
library(ggplot2)
wt.markers.plot <-DotPlot(wt, features = unique(wt_markers_5$gene)) + RotatedAxis() + ggtitle("wt with wt markers")
wt.markers.plot.2 <-DotPlot(wt, features = unique(mut_markers_5$gene)) + RotatedAxis() + ggtitle("wt with mut markers")
mut.markers.plot.2 <- DotPlot(mut, features = unique(wt_markers_5$gene)) + RotatedAxis() + ggtitle("mut with wt markers")
wt.markers.plot + mut.markers.plot + wt.markers.plot.2 + mut.markers.plot.2 + plot_layout(nrow = 2)
library(patchwork)
wt.markers.plot + mut.markers.plot + wt.markers.plot.2 + mut.markers.plot.2 + plot_layout(nrow = 2)
head(mut_markers)
mut_markers_5 <- mut_markers %>% group_by(cluster) %>% top_n(-5, p_val_adj)
wt_markers_5 <- wt_markers %>% group_by(cluster) %>% top_n(-5, p_val_adj)
wt.markers.plot <-DotPlot(wt, features = unique(wt_markers_5$gene)) + RotatedAxis() + ggtitle("wt with wt markers")
mut.markers.plot <- DotPlot(mut, features = unique(mut_markers_5$gene)) + RotatedAxis() + ggtitle("mut with mut markers")
wt.markers.plot.2 <-DotPlot(wt, features = unique(mut_markers_5$gene)) + RotatedAxis() + ggtitle("wt with mut markers")
mut.markers.plot.2 <- DotPlot(mut, features = unique(wt_markers_5$gene)) + RotatedAxis() + ggtitle("mut with wt markers")
wt.markers.plot + mut.markers.plot + wt.markers.plot.2 + mut.markers.plot.2 + plot_layout(nrow = 2)
dim(wt_markers_5)
dim(mut_markers_5)
View(mut_markers_5)
mut_markers_5 <- mut_markers[mut_markers$avg_log2FC > 0,] %>% group_by(cluster) %>% top_n(-5, p_val_adj)
wt_markers_5 <- wt_markers[wt_markers$avg_log2FC > 0,] %>% group_by(cluster) %>% top_n(-5, p_val_adj)
wt.markers.plot <-DotPlot(wt, features = unique(wt_markers_5$gene)) + RotatedAxis() + ggtitle("wt with wt markers")
mut.markers.plot <- DotPlot(mut, features = unique(mut_markers_5$gene)) + RotatedAxis() + ggtitle("mut with mut markers")
wt.markers.plot.2 <-DotPlot(wt, features = unique(mut_markers_5$gene)) + RotatedAxis() + ggtitle("wt with mut markers")
mut.markers.plot.2 <- DotPlot(mut, features = unique(wt_markers_5$gene)) + RotatedAxis() + ggtitle("mut with wt markers")
wt.markers.plot + mut.markers.plot + wt.markers.plot.2 + mut.markers.plot.2 + plot_layout(nrow = 2)
setwd("~")
getwd()
rm(list = ls())
setwd("/Volumes/BZ/Scientific Data/RG-AS04-Data01/Cichlid-genomes/alleleFreqs/")
library(data.table)
library(Gviz)
library(biomaRt)
library(qqman)
library(DescTools)
library(stringr)
library(fdrtool)
library(dplyr)
library(data.table)
library(purrr)
library(pbapply)
library(venneuler)
library(Rgb)
setwd("/Volumes/BZ/Scientific Data/RG-AS04-Data01/Cichlid-genomes/alleleFreqs/")
source("/Volumes/BZ/Scientific Data/RG-AS04-Data01/Cichlid-genomes/cichlid_variants/variants_functions.R")
gtf <- read.gtf("../../O-niloticus_ASM185804v2/GCF_001858045.1_ASM185804v2_genomic.gff")
gtf <- read.gtf("/Volumes/BZ/Scientific Data/RG-AS04-Data01/Cichlid-genomes/O-niloticus_ASM185804v2/GCF_001858045.1_ASM185804v2_genomic.gff")
gtf2 <- gtf[gtf$feature == "gene",]
# Retrieve dataset names for weir.fst
names <- list.files()
names
datasets.weir <- list.files(recursive = T)[grep("_piVals.txt", list.files(recursive = T))]
readFST
datasets.weir
datasets.pgsl <- list.files(recursive = T)[grep("_PGLSpiVals_corrected.txt", list.files(recursive = T))]
datasets.gwas
datasets.gwas <- list.files(recursive = T)[grep("_piVals.txt", list.files(recursive = T))]
datasets.gwas
datasets.pgsl
test <- read.table(datasets.gwas[1], header = T)
head(test)
dim(test)
test <- read.table(datasets.gwas[2], header = T)
dim(test)
dim(test[test$ps > 0.05,])
dim(test[test$ps < 0.05,])
library(data.table)
library(tidyverse)
library(tidyverse)
install.packages(tidyverse)
install.packages("tidyverse")
install.packages("sqldf")
library(tidyverse)
readr  = read_csv_chunked(datasets.gwas[1], callback = DataFrameCallback$new(function(x, pos) subset(x, unif > 9000)), col_types = 'dd', progress = F)
readr  = read_csv_chunked(datasets.gwas[1], callback = DataFrameCallback$new(function(x, pos) subset(x, ps < 0.05)), col_types = 'dd', progress = F)
?read_csv_chunked
datasets.gwas[1]
test <- read.csv(pipe("awk 'BEGIN {FS=\",\"} {if ($2 < 0.05) print $0}' speciesCodesAndGenomeIDs_for_GWAS_2_cohort_db_geno_NC_013663_fromProbabilities_piVals.txt"),header=T)
dim(test)
head(test)
test <- read.csv(pipe("awk 'BEGIN {FS=\",\"} {if ($2 < 0.05) print $0-3}' speciesCodesAndGenomeIDs_for_GWAS_2_cohort_db_geno_NC_013663_fromProbabilities_piVals.txt"),header=T)
dim(test)
head(test)
test <- read.csv(pipe("awk 'BEGIN {FS=\",\"} {if ($2 < 0.05) print $2}' speciesCodesAndGenomeIDs_for_GWAS_2_cohort_db_geno_NC_013663_fromProbabilities_piVals.txt"),header=T)
test <- read.csv(pipe("awk 'BEGIN {FS=\",\"} {if ($2 < 0.05) print $1}' speciesCodesAndGenomeIDs_for_GWAS_2_cohort_db_geno_NC_013663_fromProbabilities_piVals.txt"),header=T)
head(test)
dim(test)
test <- read.csv(pipe("awk 'BEGIN {FS=\",\"} {if ($3 < 0.05) print $0}' speciesCodesAndGenomeIDs_for_GWAS_2_cohort_db_geno_NC_013663_fromProbabilities_piVals.txt"),header=T)
dim(test)
head(test)
test <- read.csv(pipe("awk '$3 < 0.05 {print; next}{exit}' speciesCodesAndGenomeIDs_for_GWAS_2_cohort_db_geno_NC_013663_fromProbabilities_piVals.txt"),header=T)
test <- read.csv(pipe("awk '$3 < 0.05{print; next}{exit}' speciesCodesAndGenomeIDs_for_GWAS_2_cohort_db_geno_NC_013663_fromProbabilities_piVals.txt"),header=T)
setwd("~")
library(dplyr)
library(Seurat)
library(patchwork)
# Set working directory and load Seurat object
setwd("/Volumes/BZ/Home/gizevo30/R_Projects/Cavefish_Paper/AstMex_Hypo")
hypo <- readRDS("AstMex_63k.rds")
Idents(hypo) <- "Subtype"
idents <- levels(hypo@meta.data$Subtype)
# Subset Seurat object to just immune cells, and just Pachon and Surface, and downsample surface
immune <- subset(hypo, idents = c("Erythrocytes","Tcells","Bcells","Mast_cells","Neutrophils","Macrophages","Microglia"))
Idents(immune) <- "morph"
unique(immune@meta.data$morph)
immune.sub <- subset(immune, idents = c("Choy_surface", "Pachon_cave"))
# There were ~2.17232x more cells from Choy_surface than Pachon_cave, so downsample immune cells by same factor
immune.pachon <- subset(immune, idents = c("Pachon_cave"))
immune.choy <- subset(immune, idents = c("Choy_surface"))
immune.choy.ds <- immune.choy[, sample(colnames(immune.choy), size = round(7144/2.17232), replace=F)]
immune.choy.ds
immune.pachon
immune.pachon.data <- GetAssayData(immune.pachon, slot = "counts")
immune.choy.data <- GetAssayData(immune.choy.ds, slot = "counts")
head(immun.pachon@meta.data)
head(immune.pachon@meta.data)
immune.pachon.meta <- immune.pachon@meta.data[,c("species", "morph", "sex", "Subtype", "morph_Subtype")]
immune.choy.meta <- immune.choy.ds@meta.data[,c("species", "morph", "sex", "Subtype", "morph_Subtype")]
dim(immune.pachon.meta)
head(immune.pachon.meta)
head(immune.choy.meta)
setwd("/Volumes/BZ/RG Schier/Group/Blockkurs single cell/blockkurs_sc_projects/data/project3_data/")
write.csv(immune.pachon.meta, file = "immune_pachon_meta_data.csv", head = T)
write.csv(immune.pachon.meta, file = "immune_pachon_meta_data.csv")
setwd("/Volumes/BZ/RG Schier/Group/Blockkurs single cell/blockkurs_sc_projects/data/project3_data/")
setwd("/Volumes/BZ/RG Schier/Group/Blockkurs single cell/blockkurs_sc_projects/data/project3_data/")
saveRDS(immune.pachon.data, file = "immune_cells_PachonCave.rds")
saveRDS(immune.choy.data, file = "immune_cells_ChoySurface.rds")
write.csv(immune.pachon.meta, file = "immune_PachonCave_meta_data.csv")
write.csv(immune.choy.meta, file = "immune_ChoySurface_meta_data.csv")
setwd("/Volumes/BZ/RG Schier/Group/Blockkurs single cell/blockkurs_sc_projects/data/project3_data")
# Read in the count matrices
pachon.data <- readRDS("immune_cells_Pachon.rds")
# Read in the count matrices
pachon.data <- readRDS("immune_PachonCave_meta_data.csv")
# Read in the count matrices
pachon.data <- readRDS("immune_cells_PachonCave.rds")
surface.data <- readRDS("immune_cells_ChoySurface.rds")
pachon <- CreateSeuratObject(counts = pachon.data, project = "Pachon_cave", min.cells = 3, min.features = 200)
pachon@meta.data$morph <- "Pachon_cave"
surface <- CreateSeuratObject(counts = surface.data, project = "Surface", min.cells = 3, min.features = 200)
surface@meta.data$morph <- "Surface"
pachon.meta.data <- read.csv("immune_PachonCave_meta_data.csv", head = T)
head(pachon.meta.data)
pachon.meta.data <- read.csv("immune_PachonCave_meta_data.csv", head = T, row.names = "X")
head(pachon.meta.data)
surface.meta.data <- read.csv("immune_ChoySurface_meta_data.csv", head = T, row.names = "X")
head(pachon@meta.data)
pachon <- CreateSeuratObject(counts = pachon.data, project = "Pachon_cave", min.cells = 3, min.features = 200)
# pachon@meta.data$morph <- "Pachon_cave"
surface <- CreateSeuratObject(counts = surface.data, project = "Surface", min.cells = 3, min.features = 200)
head(pachon@meta.data)
head(pachon.meta.data)
immune.pachon.meta <- immune.pachon@meta.data[,c("species", "morph", "sex", "Subtype")]
immune.choy.meta <- immune.choy.ds@meta.data[,c("species", "morph", "sex", "Subtype")]
write.csv(immune.pachon.meta, file = "immune_PachonCave_meta_data.csv")
write.csv(immune.choy.meta, file = "immune_ChoySurface_meta_data.csv")
setwd("/Volumes/BZ/RG Schier/Group/Blockkurs single cell/blockkurs_sc_projects/data/project3_data/")
saveRDS(immune.pachon.data, file = "immune_cells_PachonCave.rds")
saveRDS(immune.choy.data, file = "immune_cells_ChoySurface.rds")
write.csv(immune.pachon.meta, file = "immune_PachonCave_meta_data.csv")
write.csv(immune.choy.meta, file = "immune_ChoySurface_meta_data.csv")
### Load and recreate Seurat Objects and combined object
# FIRTST SET YOUR WORKING DIRECTORY TO WHERE YOU DOWNLOADED THE DATA
setwd("/Volumes/BZ/RG Schier/Group/Blockkurs single cell/blockkurs_sc_projects/data/project3_data")
# Read in the count matrices
pachon.data <- readRDS("immune_cells_PachonCave.rds")
surface.data <- readRDS("immune_cells_ChoySurface.rds")
# Generate Seurat objects for each, then merge them together (if you want)
pachon <- CreateSeuratObject(counts = pachon.data, project = "Pachon_cave", min.cells = 3, min.features = 200)
# pachon@meta.data$morph <- "Pachon_cave"
surface <- CreateSeuratObject(counts = surface.data, project = "Surface", min.cells = 3, min.features = 200)
# surface@meta.data$morph <- "Surface"
# Load and add meta data which contains cell type annotations
pachon.meta.data <- read.csv("immune_PachonCave_meta_data.csv", head = T, row.names = "X")
surface.meta.data <- read.csv("immune_ChoySurface_meta_data.csv", head = T, row.names = "X")
pachon@meta.data$species <- "Astyanax_mexicanus"
surface@meta.data$species <- "Astyanax_mexicanus"
head(pachon@meta.data)
AddMetaData(pachon, pachon.meta.data$sex, col.name = "sex")
head(pachon@meta.data)
pachon <- AddMetaData(pachon, pachon.meta.data$sex, col.name = "sex")
head(pachon@meta.data)
surface <- AddMetaData(surface, surface.meta.data$sex, col.name = "sex")
head(pachon.meta.data)
# Finally, add the Cell-type meta data
pachon <- AddMetaData(pachon, pachon.meta.data$Subtype, col.name = "cell_type")
surface <- AddMetaData(surface, surface.meta.data$Subtype, col.name = "cell_type")
head(pachon@meta.data)
immune <- merge(pachon, surface)
# Here is code to compare the number of cells in each cluster between morphs
table(immune@meta.data$morph, immune@meta.data$cell_type)
head(immune@meta.data)
pachon@meta.data$morph <- "Pachon_cave"
pachon <- CreateSeuratObject(counts = pachon.data, project = "Pachon_cave", min.cells = 3, min.features = 200)
pachon@meta.data$morph <- "Pachon_cave"
surface <- CreateSeuratObject(counts = surface.data, project = "Surface", min.cells = 3, min.features = 200)
surface@meta.data$morph <- "Choy_surface"
# Load and add meta data which contains cell type annotations
pachon.meta.data <- read.csv("immune_PachonCave_meta_data.csv", head = T, row.names = "X")
surface.meta.data <- read.csv("immune_ChoySurface_meta_data.csv", head = T, row.names = "X")
# In this dataset, we also recorded the animals sex, you can add it to the meta data using these commands
pachon <- AddMetaData(pachon, pachon.meta.data$sex, col.name = "sex")
surface <- AddMetaData(surface, surface.meta.data$sex, col.name = "sex")
# Finally, add the Cell-type meta data
pachon <- AddMetaData(pachon, pachon.meta.data$Subtype, col.name = "cell_type")
surface <- AddMetaData(surface, surface.meta.data$Subtype, col.name = "cell_type")
immune <- merge(pachon, surface)
immune <- NormalizeData(immune, normalization.method = "LogNormalize", scale.factor = 10000)
immune <- FindVariableFeatures(immune, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(immune), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(immune)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot1 + plot2
all.genes <- rownames(immune)
immune <- ScaleData(immune, features = all.genes)
immune <- RunPCA(immune, features = VariableFeatures(object = immune))
ElbowPlot(immune)
n.pc <- 10 # Put your number here
immune <- FindNeighbors(immune, dims = 1:n.pc)
immune <- RunUMAP(immune, dims = 1:n.pc)
DimPlot(immune, reduction = "umap", group.by = "morph")
DimPlot(immune, reduction = "umap", group.by = "cell_type", label = T)
by_morph <- DimPlot(immune, reduction = "umap", group.by = "morph")
by_cell_type <- DimPlot(immune, reduction = "umap", group.by = "cell_type", label = T)
by_morph + by_cell_type
# Here is code to compare the number of cells in each cluster between morphs
table(immune@meta.data$morph, immune@meta.data$cell_type)
# Some marker genes to start
DotPlot(immune, group.by = "cell_type", features = c("cd74a", "apoc1", "adam8a", "cxcr4b", "apoeb"))
